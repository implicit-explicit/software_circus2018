BASIC SETUP
-----------

Basic ASCIIweb setup goes like this:

1. Unpack and set up the cgi in a directory.

2. Set permissions for your webserver to allow the
execution of the script.

3. Configure aw.conf. Should be self explanatory,
but see "3" below for more help.

4. Customize your .rfk files. See "4" below for
more information.

5. Create additional conf files to taste.

See 6, instructions for static mode, if you plan
to use ASCIIweb's static mode.

----

<b>3. CONFIGURATION OPTIONS:</b>

There are a number of options in aw.conf that you
should understand.

<b>important paths</b>

Paths are important to ASCIIweb. The dynamic
nature of the display requires that aw is able to
determine the context of relative links. To do
that, it requires certain information.

<b>script</b> is the canonical location of the
script according to your webserver, i.e.:

http://tastytronic.net/asciiweb/aw.cgi

<b>wwwroot</b> is the root of the current web, or
the top level of the current webserver (or
VirtualHost) in Apache, i.e.:

http://tastytronic.net/

<b>localdir</b> is the local directory that aw.cgi
resides in. This could probably be ascertained
from <b>script</b>, but... maybe not, i.e.:

http://tastytronic.net/asciiweb/

<b>docdir</b> is the highest parent directory that
aw is allowed to read files from. If asciiweb
thinks it can, it will read from the filesystem
rather than via the webserver. This saves time and
load. However, you don't want aw reading
/etc/passwd -- hence docdir, i.e.:

/var/www/tastytronic.net/

<b>scriptdir</b> is the directory local to aw.cgi
that contains executeables (or symlinks to
executeables) for aw to include, i.e.:

scriptitos

<b>permissions</b>

<b>allowexecute</b> should be set to 1 if you want
to allow aw to execute and include output from
applications in an asciiweb page. (Default 0)

<b>executepage</b> should be set to 1 if you want
to allow "full page includes" -- documents
completely generated by executeables, rather than
simple embedded goodies (like figlet or cowsay).
(Default 0.)

<b>dynamic_debugmode</b> should be set to 1 if you
want to allow debugging information to be accessed
via the query string parameter debugmode=1.
(Default 0.)

<b>debugmode</b> should be set to 1 if you want aw
to output debugging information constantly.
(Default 0.)

<b>page elements</b>

<b>head, leftmenu, main, foot, leftfill,</b>
<b>rightfill, rightmenu, and mainfill</b> are the
pages that will be loaded by default into those
areas unless other pages are specified by further
confs or through the query string.

<b>bgcolor, test, link, alink, and vlink</b> are
the default colors (in hex) for asciiweb.

<b>readcolor</b> is a separate color specifically
for the "main" document to enhance readability. It
allows the main body of text to be a different
color from the rest of the "text". Commenting it
out will make the "main" page be printed as
"text".

<b>persistdirconf</b> specifies whether custom
directory "confs" persist throughout the
subdirectory, or just on the top level. See the 
section on conf files for more information.

<b>lcolwidth, rcolwidth, and ccolwidth</b> are
numbers that define how wide aw will make the page
columns.

<b>4. CUSTOMIZING RFK FILES</b>



<b>5. CONFIGURATION FILES</b>

ASCIIweb has what at first may appear to be a
strange customization system. There is a
directory "confs", local to aw.cgi that contains
any special custom conf files for specific pages.

For example, if you have a main page index.rfk
for which the defaults are acceptable, but a 
special page wacky.rfk which should have 
radically different l_menu, r_menu, filler,
footer, and header pages, you need to specify
that information in a custom conf file.

If the file in question is wacky.rfk, the conf
file that affects it would be:

confs/wacky.rfk.conf

...and would look something like this:

title= !!! this page is wacky !!!
leftmenu=src/l_menu-wacky.rfk
rightmenu=src/r_menu-wacky.rfk
foot=src/wackyfoot.rfk
head=src/wackyhead.rfk

...etc. Any option available to aw.conf can be
set in a custom config file.

This allows for cool animations, where clicking
on a link causes the link to change, or appear
depressed, or open another set of options in a 
custom l_menu, etc.

<b>That said,</b> clever users will realize that
these pages can also be defined by query string,
sending links such as:

aw.cgi?leftmenu=l_wacky.rfk&rightmenu=r_wacky.rfk

...etc.

This is perfectly acceptable, but is less
flexible than using the conf file system.

ADDITIONALLY, if you intend to switch between
dynamic or static page generation (or use both
in one site), you <b>must not</b> use such query
string hackery, as static mode ONLY examines the
main parameter and conf files. This issue is 
discussed further in the section on static mode.

Finally, ASCIIweb's live directory feature
presents a further complication. Should you want
to have a live, "in-line" display of the 
directory "foo/", you might also want the header
or menus to reflect the contents of the 
directory.

This is accomplished with special conf files. 

For the directory foo/ the file would be:

confs/foo.conf

For a further subdirectory:

foo/bar/baz/

...the conf file would be:

confs/foo_bar_baz.conf

Relatedly, sometimes you just one a *single*
conf file to cover an entire directory tree.
This is accomplished by creating a top-level
conf file, and setting the aw.conf parameter:

persistdirconf=1

That's it!
